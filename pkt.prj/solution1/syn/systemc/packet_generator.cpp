// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "packet_generator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic packet_generator::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic packet_generator::ap_const_logic_0 = sc_dt::Log_0;

packet_generator::packet_generator(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "packet_generator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_V, "(port)out_V");
    sc_trace(mVcdFile, mac_destination_V, "(port)mac_destination_V");
    sc_trace(mVcdFile, mac_source_V, "(port)mac_source_V");
    sc_trace(mVcdFile, length_V, "(port)length_V");
    sc_trace(mVcdFile, ip_destination_V, "(port)ip_destination_V");
    sc_trace(mVcdFile, ip_source_V, "(port)ip_source_V");
    sc_trace(mVcdFile, source_port_V, "(port)source_port_V");
    sc_trace(mVcdFile, destination_port_V, "(port)destination_port_V");
    sc_trace(mVcdFile, inter_packet_gap_V, "(port)inter_packet_gap_V");
    sc_trace(mVcdFile, num_pkt_V, "(port)num_pkt_V");
    sc_trace(mVcdFile, continuos_V, "(port)continuos_V");
#endif

    }
    mHdltvinHandle.open("packet_generator.hdltvin.dat");
    mHdltvoutHandle.open("packet_generator.hdltvout.dat");
}

packet_generator::~packet_generator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void packet_generator::thread_ap_done() {
    ap_done = ap_start.read();
}

void packet_generator::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void packet_generator::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void packet_generator::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_V\" :  \"" << out_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mac_destination_V\" :  \"" << mac_destination_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mac_source_V\" :  \"" << mac_source_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"length_V\" :  \"" << length_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ip_destination_V\" :  \"" << ip_destination_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ip_source_V\" :  \"" << ip_source_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"source_port_V\" :  \"" << source_port_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"destination_port_V\" :  \"" << destination_port_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inter_packet_gap_V\" :  \"" << inter_packet_gap_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"num_pkt_V\" :  \"" << num_pkt_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"continuos_V\" :  \"" << continuos_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

