// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module throughput_test;
  
    reg [159:0] tdata;
    reg [19:0]  tkeep;
        
    reg clock,reset,start,tlast,tdata_empty,tkeep_empty,tlast_empty;
    reg end_calculations;
   
    wire [33:0] result;
    wire [31:0] ap_return;
    wire [15:0] num_pkt;
    wire done,idle,ready,result_valid,tdata_read,tkeep_read,tlast_read,num_pkt_valid;
    
    wire [19:0] one_way_delay;
    wire one_way_delay_valid;
    wire [15:0] jitter,length;
    wire jiter_valid,length_valid;
    
    integer file,status;
    
    reg [16:0] i;
    
    
    throughput_calc U0(
            .ap_clk(clock),                             // input
            .ap_rst(reset),                             // input
            .ap_start(start),                           // input
            .ap_done(done),                             // output
            .ap_idle(idle),                             // output
            .ap_ready(ready),                           // output    
            .in_data_V_data_V_dout(tdata),               // input
            .in_data_V_data_V_empty_n(tdata_empty),      // input
            .in_data_V_data_V_read(tdata_read),         // output
            .in_data_V_keep_V_dout(tkeep),              // input
            .in_data_V_keep_V_empty_n(tkeep_empty),     // input
            .in_data_V_keep_V_read(tkeep_read),         // output
            .in_data_V_last_V_dout(tlast),              // input
            .in_data_V_last_V_empty_n(tlast_empty),     // input
            .in_data_V_last_V_read(tlast_read),         // output
            .num_packets_V(num_pkt),                    // output
            .num_packets_V_ap_vld(num_pkt_valid),       // output
            .end_calculations_V(end_calculations),      // input
            .result_V(result),                          // output
            .result_V_ap_vld(result_valid),             // output
            .ap_return(ap_return),                      // output
            .one_way_delay_V(one_way_delay),
            .one_way_delay_V_ap_vld(one_way_delay_valid),
            .jitter_V(jitter),
            .jitter_V_ap_vld(jitter_valid),
            .length_V(length),
            .length_V_ap_vld(length_valid)
    );


        
   
        


    `timescale 100 ps/100 ps


    initial  begin
        
        clock <=1'b1;
        reset <=1'b1;
        start <=1'b0;
        
        tdata<={160 {1'b0} };
        tlast <=1'b0;
        tkeep<={20 {1'b0} };

        
        tdata_empty <=1'b0;
        tkeep_empty <=1'b0;
        tlast_empty <=1'b0;
        
        end_calculations <= 1'b0;
        
        
    
    end
    
    
    always
        #5 clock = !clock;
        
    always
        #28 reset = 1'b0;    

    
    always begin
        
        for (i=0;i<1;i=i+1) begin
            #40 start <=1'b1;
            #30 start <=1'b0;
            file=$fopen("/home/hpcn/Desktop/marior/NetFPGA10G/throughput_calculations/length_tsrx1_tsrx.txt","r"); // open file
            $display("Value file %d\n",file);
            status=$fscanf(file,"%h\t%h\t%h\t%h\t%h\t%h",tdata[159:144],tdata[143:128],tdata[127:96],tdata[95:64],tdata[63:32],tdata[31:0]);
            while (!$feof(file)) begin
                tkeep<={20 {1'b1} };
                tlast <=1'b1;
                
                tdata_empty <=1'b1;
                tkeep_empty <=1'b1;
                tlast_empty <=1'b1;
    
                #10;
                tdata<={160 {1'b0} };
                tkeep<={20 {1'b0} };
                tlast <=1'b0;
                tdata_empty <=1'b0;
                tkeep_empty <=1'b0;
                tlast_empty <=1'b0;
                #40;
                status=$fscanf(file,"%h\t%h\t%h\t%h\t%h",tdata[159:128],tdata[127:96],tdata[95:64],tdata[63:32],tdata[31:0]);
            end
      
                   
            $fclose(file);
            
            //# 100 end_calculations <= 1'b1;
            //# 100 end_calculations <= 1'b0;
            
            # 2000;
            
        end    
        #700000000;
        
    end
        
    


endmodule